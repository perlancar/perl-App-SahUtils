#!perl

# DATE
# VERSION

use 5.010001;
use strict 'subs', 'vars';
use warnings;
use Perinci::CmdLine::Any;

our %SPEC;

$SPEC{app} = {
    v => 1.1,
    summary => 'Show schema from Data::Sah::Coerce::{,perl,js} module',
    args => {
        name => {
            schema => ['perl::modname*'],
            pos => 0,
            completion => sub {
                my %args = @_;
                require Complete::Module;
                require Complete::Util;
                Complete::Util::combine_answers(
                    Complete::Module::complete_module(
                        word => $args{word},
                        ns_prefix => 'Data::Sah::Coerce',
                    ),
                    Complete::Module::complete_module(
                        word => $args{word},
                        ns_prefix => 'Data::Sah::Coerce::perl',
                    ),
                    Complete::Module::complete_module(
                        word => $args{word},
                        ns_prefix => 'Data::Sah::Coerce::js',
                    ),
                );
            },
        },
        list => {
            schema => ['bool', is=>1],
            cmdline_aliases => {l=>{}},
        },
    },
};
sub app {
    my %args = @_;

    my $name = $args{name};

    if ($args{list}) {
        my @res;
        require PERLANCAR::Module::List;
        my $res = PERLANCAR::Module::List::list_modules(
            'Data::Sah::Coerce::', {list_modules=>1, recurse=>1});
        for (sort keys %$res) {
            s/\AData::Sah::Coerce:://;
            push @res, $_;
        }
        return [200, "OK", \@res];
    } elsif ($name) {
        require File::Slurper;
        require Module::Path::More;
        $name =~ /\A\w+(::\w+)*\z/
            or return [400, "Invalid module name '$name'"];;
        my $found;
        for my $prefix ("Data::Sah::Coerce", "Data::Sah::Coerce::perl", "Data::Sah::Coerce::js", "") {
            my $fullname = "$prefix\::$name";
            my $path = Module::Path::More::module_path(module => $fullname);
            next unless $path;
            $found++;
            return [200, "OK", File::Slurper::read_text($path)];
        }
        return [404, "No such coerce module name '$name'"] unless $found;
    } else {
        return [400, "Please specify name of a Sah schema module (or -l)"];
    }
}

Perinci::CmdLine::Any->new(
    url => '/main/app',
    pass_cmdline_object => 1,
)->run;

# ABSTRACT:
# PODNAME:

=head1 SEE ALSO

L<list-sah-schema-modules>
