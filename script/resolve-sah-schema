#!perl

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

# AUTHORITY
# DATE
# DIST
# VERSION

our %SPEC;

$SPEC{resolve_sah_schema} = {
    v => 1.1,
    summary => 'Resolve Sah schema',
    args => {
        schema => {
            schema => 'str*', # XXX perl::data
            req => 1,
            pos => 0,
        },
        return_intermediates => {
            schema => 'bool',
        },
        merge_clause_sets => {
            schema => 'bool',
            default => 1,
        },
    },
};
sub resolve_sah_schema {
    require Data::Dump::Color;
    require Data::Sah::Resolve;

    my %args = @_;

    my $sch;
    if ($args{schema} =~ /\A\w+(::\w+)*\*?\z/) {
        $sch = $args{schema};
    } else {
        eval "\$sch = $args{schema}";
        die if $@;
    }

    my $nsch = Data::Sah::Resolve::resolve_schema(
        {
            return_intermediates => $args{return_intermediates},
            merge_clause_sets    => $args{merge_clause_sets},
        },
        $sch);

    [200, "OK", Data::Dump::Color::dump($nsch) . "\n", {
        'cmdline.skip_format' => 1,
    }];
}

Perinci::CmdLine::Any->new(
    url => '/main/resolve_sah_schema',
)->run;

# ABSTRACT:
# PODNAME:

=head1 SYNOPSIS

 % resolve-sah-schema '"int"'
 ["int", []]

 % resolve-sah-schema '"posint"' ; # will look Sah::Schema::posint up
 ["int", {min=>1}]

 % resolve-sah-schema '["posint", div_by=>2]'
 ["int", {min=>1}, {div_by=>2}]

 % resolve-sah-schema '["posint", "merge.delete.min"=>undef, div_by=>2]'
 ["int", {div_by=>2}]


=head1 DESCRIPTION

This script can be used to quickly produce/see the resolved form of a L<Sah>
schema. Both input and output are in the form of Perl code.


=head1 SEE ALSO

L<Data::Sah::Resolve>
