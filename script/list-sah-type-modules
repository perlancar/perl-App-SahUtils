#!perl

#use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;
use Perinci::Sub::Gen::AccessTable qw(gen_read_table_func);

# AUTHORITY
# DATE
# DIST
# VERSION

our %SPEC;

# XXX add option: include base classes or not

my $res = gen_read_table_func(
    name => 'app',
    summary => 'List Sah type modules (Data::Sah::Type::*)',
    table_spec => {
        fields => {
            name => {
                schema => 'str*',
                pos => 0,
                sortable => 1,
            },
            #base => {
            #    schema => 'str*',
            #    pos => 1,
            #    sortable => 1,
            #},
        },
        pk => 'name',
    },
    table_data => sub {
        no strict 'refs'; ## no critic: TestingAndDebugging::ProhibitNoStrict
        require Module::List::Tiny;

        my $mods = Module::List::Tiny::list_modules(
            'Data::Sah::Type::', {list_modules=>1, recurse=>1});
        my @rows;
        for my $mod (sort keys %$mods) {
            (my $name = $mod) =~ s/\AData::Sah::Type:://;
            (my $mod_pm = "$mod.pm") =~ s!::!/!g;
            require $mod_pm;

            # type modules uses roles instead of inheritance
            #my @isa = @{"$mod\::ISA"};
            #for (@isa) { s/^Data::Sah::Type::// }

            push @rows, {
                name => $name,
                #base => join(", ", @isa),
            };
        }
        {data => \@rows};
    },
);
die "Can't generate function: $res->[0] - $res->[1]" unless $res->[0] == 200;

Perinci::CmdLine::Any->new(
    url => '/main/app',
)->run;

# ABSTRACT:
# PODNAME:
