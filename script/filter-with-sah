#!perl

# AUTHORITY
# DATE
# DIST
# VERSION

use 5.010;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our %SPEC;

$SPEC{filter_with_sah} = {
    v => 1.1,
    summary => 'Filter data',
    args_rels => {
        'choose_one&' => [
            [qw/data_as_json multiple_data_as_json
                data_as_perl multiple_data_as_perl/],
        ],
    },
    args => {
        filter_names => {
            'x.name.is_plural' => 1,
            'x.name.singular' => 'filter_name',
            schema => ['array*', of=>'str*'],
            req => 1,
            tags => ['category:filter-specification'],
            element_completion => sub {
                my %args = @_;
                my $cmdline = $args{cmdline} or return undef;
                my $r = $args{r};

                $r->{read_config} = 1;
                my $res = $cmdline->parse_argv($r);
                my $type = $res->[2]{type} or return undef;
                my $compiler = $res->[2]{compiler} // 'perl';

                require Complete::Module;
                Complete::Module::complete_module(
                    word => $args{word},
                    ns_prefix => "Data::Sah::Filter::$compiler::$type",
                );
            },
        },

        data_as_json => {
            summary => 'Data as JSON',
            schema => ['str*'],
            tags => ['category:data-specification'],
        },
        multiple_data_as_json => {
            summary => 'Multiple data as JSON code, JSON data must be an array',
            schema => ['str*'],
            tags => ['category:data-specification'],
        },
        data_as_perl => {
            summary => 'Data as Perl code',
            schema => ['str*'],
            tags => ['category:data-specification'],
        },
        multiple_data_as_perl => {
            summary => 'Multiple data as Perl code, perl code should return arrayref',
            schema => ['str*'],
            tags => ['category:data-specification'],
        },

        show_code => {
            summary => "Don't filter data, show generated filter code only",
            schema=>['bool', is=>1],
            cmdline_aliases => {c=>{}},
            tags => ['category:action-selection'],
        },
        data_with_result => {
            summary => "Show data alongside with filtered result",
            description => <<'_',

The default is to show the filtered result only.

_
            schema=>['bool', is=>1],
            cmdline_aliases => {d=>{}},
            tags => ['category:output'],
        },
#        with_debug => {
#            summary => 'Generate filter with debug on',
#            description => <<'_',
#
#This means e.g. to pepper the filter code with logging statements.
#
#_
#            schema => ['bool', is=>1],
#            tags => ['category:filter-specification'],
#        },
        compiler => {
            summary => "Select compiler",
            schema=>['str*', in=>[qw/perl js/]],
            default => 'perl',
            cmdline_aliases => {C=>{}},
            tags => ['category:filter-specification'],
        },
        linenum => {
            summary => 'When showing source code, add line numbers',
            schema=>['bool', is=>1],
            cmdline_aliases => {l=>{}},
            tags => ['category:output'],
        },
    },
    examples => [
        {
            src => q([[prog]] --filter-name Str::ltrim --filter-name Str::rtrim --data-as-perl '"  foo  "'),
            src_plang => 'bash',
        },
    ],
};
sub filter_with_sah {
    my %args = @_;

    my $c = $args{compiler};

    my $res;
  GET_RESULT:
    {
        my $gen_res;
        {
            no strict 'refs';
            my %gen_args = (
                filter_names => $args{filter_names},
            );
            $gen_args{source} = 1 if $args{show_code};
            #$gen_opts{debug} = 1 if $args{with_debug};
            #$gen_opts{pp} = 1 if $args{pp};
            #$gen_opts{core} = 1 if $args{core};
            #$gen_opts{core_or_pp} = 1 if $args{core_or_pp};
            #$gen_opts{no_modules} = 1 if $args{no_modules};
            if ($c eq 'perl') {
                require Data::Sah::Filter;
                $gen_res = Data::Sah::Filter::gen_filter(%gen_args);
            } elsif ($c eq 'js') {
                require Data::Sah::FilterJS;
                $gen_res = Data::Sah::FilterJS::gen_filter(%gen_args);
            } else {
                $res = [400, "Unknown compiler '$c', please specify perl/js"];
                last GET_RESULT;
            }
        }

        if ($args{show_code}) {
            $gen_res .= "\n" unless $gen_res =~ /\R\z/;
            if ($args{linenum}) {
                require String::LineNumber;
                $gen_res = String::LineNumber::linenum($gen_res);
            }
            $res = [200, "OK", $gen_res, {'cmdline.skip_format'=>1}];
            last GET_RESULT;
        }

        my $data;
        my $multiple;
        if (defined $args{data_as_json}) {
            require JSON::MaybeXS;
            $data = JSON::MaybeXS->new->allow_nonref->decode($args{data_as_json});
        } elsif (defined $args{multiple_data_as_json}) {
            require JSON::MaybeXS;
            $data = JSON::MaybeXS->new->allow_nonref->decode($args{multiple_data_as_json});
            $multiple = 1;
        } elsif (defined $args{data_as_perl}) {
            $data = eval $args{data_as_perl};
            die if $@;
        } elsif (defined $args{multiple_data_as_perl}) {
            $data = eval $args{multiple_data_as_perl};
            die if $@;
            $multiple = 1;
        } else {
            $res = [400, "Please specify 'data_as_json' or 'multiple_data_as_json' or 'data_as_perl' or 'multiple_data_as_perl'"];
            last GET_RESULT;
        }
        if ($multiple && ref($data) ne 'ARRAY') {
            $res = [400, "Multiple data must be an array"];
            last GET_RESULT;
        }

        if ($multiple) {
            if ($args{data_with_result}) {
                $res = [200, "OK", [map {{data=>$_, result=>$gen_res->($_)}} @$data]];
            } else {
                $res = [200, "OK", [map {$gen_res->($_)} @$data]];
            }
            last GET_RESULT;
        } else {
            if ($args{data_with_result}) {
                $res = [200, "OK", {data=>$data, result=>$gen_res->($data)}];
            } else {
                $res = [200, "OK", $gen_res->($data)];
            }
            last GET_RESULT;
        }

        die "BUG: This should not be reached";
    } # GET_RESULT

    my $outputs_text = $args{-cmdline_r} &&
        ($args{-cmdline_r}{format} // 'text') =~ /text/;
    if ($outputs_text && $res->[0] == 200 && ref($res->[2])) {
        require Data::Dump;
        $res->[2] = Data::Dump::dump($res->[2]);
   }
    $res;
}

my $cli = Perinci::CmdLine::Any->new(
    url => '/main/filter_with_sah',
    pass_cmdline_object => 1,
);
$cli->{common_opts}{naked_res}{default} = 1;
$cli->run;

# ABSTRACT:
# PODNAME:

=head1 FAQ

=head2 When there is an error (e.g. in generating filter code, in filtering) the program returns undef/null, how do I see the error message?

Pass `--no-naked-res` to see the error code and error message. The default is
naked for simpler output.
